import random
import telebot
import sqlalchemy
from sqlalchemy import func
from sqlalchemy.orm import sessionmaker
from telebot import types, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from config.—Åonfig import TOKEN, DSN
from models import create_tables, Users, Words, Deleted_words



state_storage = StateMemoryStorage()

bot = telebot.TeleBot(TOKEN,state_storage=state_storage)


engine = sqlalchemy.create_engine(DSN)

create_tables(engine)

Session = sessionmaker(bind=engine)
session = Session()


known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

def add_base_words():
    words_dict = {'i':'—è', 'you':'–≤—ã', 'he':'–æ–Ω', 'she':'–æ–Ω–∞', 'it':'–æ–Ω–æ', 'they':'–æ–Ω–∏', 'we':'–º—ã', 
         'green':'–∑–µ–ª–µ–Ω—ã–π', 'yellow':'–∂—ë–ª—Ç—ã–π', 'blue':'—Å–∏–Ω–∏–π', 'orange':'–æ—Ä–∞–Ω–∂–µ–≤—ã–π', 'red':'–∫—Ä–∞—Å–Ω—ã–π',
         'cat':'–∫–æ—à–∫–∞', 'dog':'—Å–æ–±–∞–∫–∞', 'fish':'—Ä—ã–±–∞','fly':'–º—É—Ö–∞','mole':'–∫—Ä–æ—Ç'}
    
    for word in words_dict:
        words = session.query(Words.english_word).filter(Words.english_word == word, Words.user_id == 1).all()
        if not words:
            session.add(Words(english_word =word,russian_word=words_dict[word],user_id = 1))
            session.commit()
    return '–≥–æ—Ç–æ–≤–æ'


def get_id(name):
    id = session.query(Users.id).filter(Users.user_name == name).all()
    return id[0][0]
def get_target_words_dict(id):
    target_words = {}
    add_base_words()
    words_all = session.query(Words.english_word, Words.russian_word).filter(Words.user_id ==1).all()
    words_user = session.query(Words.english_word, Words.russian_word).filter(Words.user_id == id).all()
    for en_word,ru_word in words_all:
        target_words[en_word] = ru_word
    if words_user:
        for en_word,ru_word in words_user:
            target_words[en_word] = ru_word
    del_words = session.query(Deleted_words.english_word).filter(Deleted_words.user_id == id).all()
    if del_words:
        for en_word in del_words:
            if en_word[0] in target_words:
                target_words.pop(en_word[0])
    return target_words


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ'
    NEXT = '–î–∞–ª—å—à–µ ‚û°'
    LESSON = '–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üìö'
    EXIT = '–í—ã–π—Ç–∏ üö™'
    BACK = '‚¨Ö –ù–∞–∑–∞–¥'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


@bot.message_handler(commands=['start'])
def hello(message):
    user = session.query(Users.user_name).filter(Users.user_name == 'All').all()
    if not user:
        session.add(Users(user_name = 'All',count_words = 17))
        session.commit()
    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
    name = message.from_user.username
    user_table_name = session.query(Users.user_name).filter_by(user_name=name).all()
    if user_table_name:
        bot.send_message(cid, f'–ü—Ä–∏–≤–µ—Ç, {name}! \n–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É: \n–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üìö \n –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï, \n –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ. \n –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.')
    else:
       session.add(Users(user_name=name, count_words = 17))
       session.commit()
       bot.send_message(cid, f'–ü—Ä–∏–≤–µ—Ç, {name}! \n–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É: \n–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üìö \n –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï, \n –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ. \n –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.')
    start(message)


@bot.message_handler(commands=['go'])
def start(message):
    add_base_words()
    greeting = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ'
    markup = types.ReplyKeyboardMarkup(row_width=2)
    yes = types.KeyboardButton(Command.LESSON)
    no = types.KeyboardButton(Command.EXIT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    markup.add(yes, no, add_word_btn, delete_word_btn)
    bot.send_message(message.chat.id,greeting,reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == Command.EXIT)
def exit(message):
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!')
    bot.stop_polling()

@bot.message_handler(func=lambda message: message.text == Command.LESSON)
def create_cards(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    name = message.from_user.username
    id = get_id(name)
    
    target_words = get_target_words_dict(id)

    global buttons
    buttons = []
    
    target_word = random.choice(list(target_words))
    translate = target_words[target_word]
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = random.sample(list(target_words), 3)
    if target_word in others:
        others.remove(target_word)
        others.append(random.choice(list(target_words)))
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.BACK)
def back(message):
    start(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def del_english_word(message):
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.')
    bot.register_next_step_handler(message,del_check)
def del_check(message):
    global del_eng_word
    del_eng_word = message.text
    name = message.from_user.username
    id = get_id(name)
    words_user = session.query(Words.english_word).filter(Words.english_word == del_eng_word.lower()).filter(Words.english_word == del_eng_word.lower(),Words.user_id ==id).all()
    words_all = session.query(Words.english_word).filter(Words.english_word == del_eng_word.lower()).filter(Words.english_word == del_eng_word.lower(),Words.user_id ==1).all()

    if del_eng_word != '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ' and del_eng_word != '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï' and del_eng_word !='–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üìö' and del_eng_word !='–í—ã–π—Ç–∏ üö™':
        if words_all:
            bot.send_message(message.from_user.id, "–ê —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º!")
            bot.register_next_step_handler(message,del_base)
        elif words_user:
            bot.send_message(message.from_user.id, "–ê —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º!")
            bot.register_next_step_handler(message,del_base)
        else:
            bot.send_message(message.from_user.id,'–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç!')
    elif del_eng_word == "–í—ã–π—Ç–∏ üö™":
        start(message)
    else:
         del_english_word(message) 
       
def del_base(message):
    del_rus_word = message.text
    name = message.from_user.username
    id = get_id(name)
    session.add(Deleted_words(english_word= del_eng_word.lower(), russian_word=del_rus_word.lower(),user_id=id))
    session.commit()
    session.query(Users).filter( Users.user_name == 'UtrekTi').update({Users.count_words: Users.count_words-1})
    session.commit()
    bot.send_message(message.chat.id, f'–ì–æ—Ç–æ–≤–æ ‚Äì {del_eng_word} —É–¥–∞–ª–µ–Ω–æ!')
    
        

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_english_word(message):
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º!') 
    bot.register_next_step_handler(message,add_russian_word)
def add_russian_word(message):
    global eng_word
    eng_word = message.text
    name = message.from_user.username
    id = get_id(name)
    all_words = session.query(Words.english_word).filter(Words.english_word == eng_word.lower(),Words.user_id ==1).all()
    user_words = session.query(Words.english_word).filter(Words.english_word == eng_word.lower(),Words.user_id ==id).all()
    del_word = session.query(Deleted_words.english_word).filter(Deleted_words.english_word == eng_word.lower(),Deleted_words.user_id == id).all()
    if eng_word != '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ' and eng_word != '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï' and eng_word !='–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üìö' and eng_word !='–í—ã–π—Ç–∏ üö™':
        if all_words:
            if del_word:
                delete = session.query(Deleted_words).filter(Deleted_words.english_word == eng_word.lower(),Deleted_words.user_id == id).one()
                session.delete(delete)
                session.commit()
                session.query(Users).filter( Users.user_name == 'UtrekTi').update({Users.count_words: Users.count_words+1})
                session.commit()
                count = session.query(Users.count_words).filter( Users.user_name == 'UtrekTi').one()
                bot.send_message(message.from_user.id, f'–ì–æ—Ç–æ–≤–æ ‚Äì {eng_word} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–°–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è- {count[0]}')
            else:
                count = session.query(Users.count_words).filter( Users.user_name == 'UtrekTi').one()
                bot.send_message(message.from_user.id, f'–¢—ã —É–∂–µ —É—á–∏—à—å —ç—Ç–æ! \n–°–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è- {count[0]}')
        elif user_words:
            if del_word:
                delete = session.query(Deleted_words).filter(Deleted_words.english_word == eng_word.lower(),Deleted_words.user_id == id).one()
                session.delete(delete)
                session.commit()
                session.query(Users).filter( Users.user_name == 'UtrekTi').update({Users.count_words: Users.count_words+1})
                session.commit()
                count = session.query(Users.count_words).filter( Users.user_name == 'UtrekTi').one()
                bot.send_message(message.from_user.id, f'–ì–æ—Ç–æ–≤–æ ‚Äì {eng_word} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–°–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è- {count[0]}')
            else:
                count = session.query(Users.count_words).filter( Users.user_name == 'UtrekTi').one()
                bot.send_message(message.from_user.id, f'–¢—ã —É–∂–µ —É—á–∏—à—å —ç—Ç–æ! \n–°–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è- {count[0]}')        
        else:
            bot.send_message(message.from_user.id, "–ê —Ç–µ–ø–µ—Ä—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º!")
            bot.register_next_step_handler(message,add_base)
    elif eng_word == "–í—ã–π—Ç–∏ üö™":
        start(message)
    else:
         add_english_word(message) 
    
def add_base(message):
    rus_word = message.text.lower()
    name = message.from_user.username
    id = get_id(name)    
    session.add(Words(english_word= eng_word.lower(), russian_word=rus_word.lower(),user_id=id))
    session.commit()
    session.query(Users).filter( Users.user_name == 'UtrekTi').update({Users.count_words: Users.count_words+1})
    session.commit()
    count = session.query(Users.count_words).filter( Users.user_name == 'UtrekTi').one()

    bot.send_message(message.chat.id, f'‚úÖ –ì–æ—Ç–æ–≤–æ!\n–¢–µ–ø–µ—Ä—å —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è - {count[0]}')


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ! üî•", hint]
            hint = show_hint(*hint_text)
            bot.send_message(message.from_user.id, hint)
            menu(message)
        elif '‚õî' in text:
            hint = ['–í—Å—ë –µ—â—ë –Ω–µ–≤–µ—Ä–Ω–æ!']
            bot.send_message(message.from_user.id, hint,reply_markup=markup)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚õî'
            markup.add(*buttons)
            hint = show_hint("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n"
                             f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üá∑üá∫{data['translate_word']}")
            bot.send_message(message.chat.id, hint, reply_markup=markup)
def menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    next_btn = types.KeyboardButton(Command.NEXT)
    back_btn = types.KeyboardButton(Command.BACK)
    markup.add(back_btn,next_btn)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.polling(none_stop=True)


